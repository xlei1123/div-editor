/* eslint-disable */
/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */
import { HTMLStencilElement, JSXBase } from "@stencil/core/internal";
import { Editor } from "@tiptap/core";
export { Editor } from "@tiptap/core";
export namespace Components {
    interface DivEditor {
        "editorExtensions": any[];
    }
    interface DivMenu {
        "editor": Editor;
    }
    interface DivMenuAlignment {
        "editor": Editor;
    }
    interface DivMenuBar {
        "editor": Editor;
    }
    interface DivMenuClearFormat {
        "editor": Editor;
    }
    interface DivMenuCode {
        "editor": Editor;
    }
    interface DivMenuFontBackground {
        "editor": Editor;
    }
    interface DivMenuFontBold {
        "editor": Editor;
    }
    interface DivMenuFontColor {
        "editor": Editor;
    }
    interface DivMenuFontDelline {
        "editor": Editor;
    }
    interface DivMenuFontFamily {
        "editor": Editor;
    }
    interface DivMenuFontItalic {
        "editor": Editor;
    }
    interface DivMenuFontSize {
        "editor": Editor;
    }
    interface DivMenuFontUnderline {
        "editor": Editor;
    }
    interface DivMenuFormatBrush {
        "editor": Editor;
    }
    interface DivMenuImage {
        "editor": Editor;
    }
    interface DivMenuInsert {
        "editor": Editor;
    }
    interface DivMenuLetterSpace {
        "editor": Editor;
    }
    interface DivMenuLineHeight {
        "editor": Editor;
    }
    interface DivMenuList {
        "editor": Editor;
    }
    interface DivMenuNumberList {
        "editor": Editor;
    }
    interface DivMenuQuote {
        "editor": Editor;
    }
    interface DivMenuTable {
        "editor": Editor;
    }
    interface DivMenuTodo {
        "editor": Editor;
    }
    interface DivTiptap {
        "extensions": any[];
        "height": string;
    }
    interface DivUtilDivider {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first": string;
        /**
          * The last name
         */
        "last": string;
        /**
          * The middle name
         */
        "middle": string;
    }
}
export interface DivEditorCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDivEditorElement;
}
export interface DivTiptapCustomEvent<T> extends CustomEvent<T> {
    detail: T;
    target: HTMLDivTiptapElement;
}
declare global {
    interface HTMLDivEditorElement extends Components.DivEditor, HTMLStencilElement {
    }
    var HTMLDivEditorElement: {
        prototype: HTMLDivEditorElement;
        new (): HTMLDivEditorElement;
    };
    interface HTMLDivMenuElement extends Components.DivMenu, HTMLStencilElement {
    }
    var HTMLDivMenuElement: {
        prototype: HTMLDivMenuElement;
        new (): HTMLDivMenuElement;
    };
    interface HTMLDivMenuAlignmentElement extends Components.DivMenuAlignment, HTMLStencilElement {
    }
    var HTMLDivMenuAlignmentElement: {
        prototype: HTMLDivMenuAlignmentElement;
        new (): HTMLDivMenuAlignmentElement;
    };
    interface HTMLDivMenuBarElement extends Components.DivMenuBar, HTMLStencilElement {
    }
    var HTMLDivMenuBarElement: {
        prototype: HTMLDivMenuBarElement;
        new (): HTMLDivMenuBarElement;
    };
    interface HTMLDivMenuClearFormatElement extends Components.DivMenuClearFormat, HTMLStencilElement {
    }
    var HTMLDivMenuClearFormatElement: {
        prototype: HTMLDivMenuClearFormatElement;
        new (): HTMLDivMenuClearFormatElement;
    };
    interface HTMLDivMenuCodeElement extends Components.DivMenuCode, HTMLStencilElement {
    }
    var HTMLDivMenuCodeElement: {
        prototype: HTMLDivMenuCodeElement;
        new (): HTMLDivMenuCodeElement;
    };
    interface HTMLDivMenuFontBackgroundElement extends Components.DivMenuFontBackground, HTMLStencilElement {
    }
    var HTMLDivMenuFontBackgroundElement: {
        prototype: HTMLDivMenuFontBackgroundElement;
        new (): HTMLDivMenuFontBackgroundElement;
    };
    interface HTMLDivMenuFontBoldElement extends Components.DivMenuFontBold, HTMLStencilElement {
    }
    var HTMLDivMenuFontBoldElement: {
        prototype: HTMLDivMenuFontBoldElement;
        new (): HTMLDivMenuFontBoldElement;
    };
    interface HTMLDivMenuFontColorElement extends Components.DivMenuFontColor, HTMLStencilElement {
    }
    var HTMLDivMenuFontColorElement: {
        prototype: HTMLDivMenuFontColorElement;
        new (): HTMLDivMenuFontColorElement;
    };
    interface HTMLDivMenuFontDellineElement extends Components.DivMenuFontDelline, HTMLStencilElement {
    }
    var HTMLDivMenuFontDellineElement: {
        prototype: HTMLDivMenuFontDellineElement;
        new (): HTMLDivMenuFontDellineElement;
    };
    interface HTMLDivMenuFontFamilyElement extends Components.DivMenuFontFamily, HTMLStencilElement {
    }
    var HTMLDivMenuFontFamilyElement: {
        prototype: HTMLDivMenuFontFamilyElement;
        new (): HTMLDivMenuFontFamilyElement;
    };
    interface HTMLDivMenuFontItalicElement extends Components.DivMenuFontItalic, HTMLStencilElement {
    }
    var HTMLDivMenuFontItalicElement: {
        prototype: HTMLDivMenuFontItalicElement;
        new (): HTMLDivMenuFontItalicElement;
    };
    interface HTMLDivMenuFontSizeElement extends Components.DivMenuFontSize, HTMLStencilElement {
    }
    var HTMLDivMenuFontSizeElement: {
        prototype: HTMLDivMenuFontSizeElement;
        new (): HTMLDivMenuFontSizeElement;
    };
    interface HTMLDivMenuFontUnderlineElement extends Components.DivMenuFontUnderline, HTMLStencilElement {
    }
    var HTMLDivMenuFontUnderlineElement: {
        prototype: HTMLDivMenuFontUnderlineElement;
        new (): HTMLDivMenuFontUnderlineElement;
    };
    interface HTMLDivMenuFormatBrushElement extends Components.DivMenuFormatBrush, HTMLStencilElement {
    }
    var HTMLDivMenuFormatBrushElement: {
        prototype: HTMLDivMenuFormatBrushElement;
        new (): HTMLDivMenuFormatBrushElement;
    };
    interface HTMLDivMenuImageElement extends Components.DivMenuImage, HTMLStencilElement {
    }
    var HTMLDivMenuImageElement: {
        prototype: HTMLDivMenuImageElement;
        new (): HTMLDivMenuImageElement;
    };
    interface HTMLDivMenuInsertElement extends Components.DivMenuInsert, HTMLStencilElement {
    }
    var HTMLDivMenuInsertElement: {
        prototype: HTMLDivMenuInsertElement;
        new (): HTMLDivMenuInsertElement;
    };
    interface HTMLDivMenuLetterSpaceElement extends Components.DivMenuLetterSpace, HTMLStencilElement {
    }
    var HTMLDivMenuLetterSpaceElement: {
        prototype: HTMLDivMenuLetterSpaceElement;
        new (): HTMLDivMenuLetterSpaceElement;
    };
    interface HTMLDivMenuLineHeightElement extends Components.DivMenuLineHeight, HTMLStencilElement {
    }
    var HTMLDivMenuLineHeightElement: {
        prototype: HTMLDivMenuLineHeightElement;
        new (): HTMLDivMenuLineHeightElement;
    };
    interface HTMLDivMenuListElement extends Components.DivMenuList, HTMLStencilElement {
    }
    var HTMLDivMenuListElement: {
        prototype: HTMLDivMenuListElement;
        new (): HTMLDivMenuListElement;
    };
    interface HTMLDivMenuNumberListElement extends Components.DivMenuNumberList, HTMLStencilElement {
    }
    var HTMLDivMenuNumberListElement: {
        prototype: HTMLDivMenuNumberListElement;
        new (): HTMLDivMenuNumberListElement;
    };
    interface HTMLDivMenuQuoteElement extends Components.DivMenuQuote, HTMLStencilElement {
    }
    var HTMLDivMenuQuoteElement: {
        prototype: HTMLDivMenuQuoteElement;
        new (): HTMLDivMenuQuoteElement;
    };
    interface HTMLDivMenuTableElement extends Components.DivMenuTable, HTMLStencilElement {
    }
    var HTMLDivMenuTableElement: {
        prototype: HTMLDivMenuTableElement;
        new (): HTMLDivMenuTableElement;
    };
    interface HTMLDivMenuTodoElement extends Components.DivMenuTodo, HTMLStencilElement {
    }
    var HTMLDivMenuTodoElement: {
        prototype: HTMLDivMenuTodoElement;
        new (): HTMLDivMenuTodoElement;
    };
    interface HTMLDivTiptapElement extends Components.DivTiptap, HTMLStencilElement {
    }
    var HTMLDivTiptapElement: {
        prototype: HTMLDivTiptapElement;
        new (): HTMLDivTiptapElement;
    };
    interface HTMLDivUtilDividerElement extends Components.DivUtilDivider, HTMLStencilElement {
    }
    var HTMLDivUtilDividerElement: {
        prototype: HTMLDivUtilDividerElement;
        new (): HTMLDivUtilDividerElement;
    };
    interface HTMLMyComponentElement extends Components.MyComponent, HTMLStencilElement {
    }
    var HTMLMyComponentElement: {
        prototype: HTMLMyComponentElement;
        new (): HTMLMyComponentElement;
    };
    interface HTMLElementTagNameMap {
        "div-editor": HTMLDivEditorElement;
        "div-menu": HTMLDivMenuElement;
        "div-menu-alignment": HTMLDivMenuAlignmentElement;
        "div-menu-bar": HTMLDivMenuBarElement;
        "div-menu-clear-format": HTMLDivMenuClearFormatElement;
        "div-menu-code": HTMLDivMenuCodeElement;
        "div-menu-font-background": HTMLDivMenuFontBackgroundElement;
        "div-menu-font-bold": HTMLDivMenuFontBoldElement;
        "div-menu-font-color": HTMLDivMenuFontColorElement;
        "div-menu-font-delline": HTMLDivMenuFontDellineElement;
        "div-menu-font-family": HTMLDivMenuFontFamilyElement;
        "div-menu-font-italic": HTMLDivMenuFontItalicElement;
        "div-menu-font-size": HTMLDivMenuFontSizeElement;
        "div-menu-font-underline": HTMLDivMenuFontUnderlineElement;
        "div-menu-format-brush": HTMLDivMenuFormatBrushElement;
        "div-menu-image": HTMLDivMenuImageElement;
        "div-menu-insert": HTMLDivMenuInsertElement;
        "div-menu-letter-space": HTMLDivMenuLetterSpaceElement;
        "div-menu-line-height": HTMLDivMenuLineHeightElement;
        "div-menu-list": HTMLDivMenuListElement;
        "div-menu-number-list": HTMLDivMenuNumberListElement;
        "div-menu-quote": HTMLDivMenuQuoteElement;
        "div-menu-table": HTMLDivMenuTableElement;
        "div-menu-todo": HTMLDivMenuTodoElement;
        "div-tiptap": HTMLDivTiptapElement;
        "div-util-divider": HTMLDivUtilDividerElement;
        "my-component": HTMLMyComponentElement;
    }
}
declare namespace LocalJSX {
    interface DivEditor {
        "editorExtensions"?: any[];
        "onEditorInit"?: (event: DivEditorCustomEvent<Editor>) => void;
    }
    interface DivMenu {
        "editor"?: Editor;
    }
    interface DivMenuAlignment {
        "editor"?: Editor;
    }
    interface DivMenuBar {
        "editor"?: Editor;
    }
    interface DivMenuClearFormat {
        "editor"?: Editor;
    }
    interface DivMenuCode {
        "editor"?: Editor;
    }
    interface DivMenuFontBackground {
        "editor"?: Editor;
    }
    interface DivMenuFontBold {
        "editor"?: Editor;
    }
    interface DivMenuFontColor {
        "editor"?: Editor;
    }
    interface DivMenuFontDelline {
        "editor"?: Editor;
    }
    interface DivMenuFontFamily {
        "editor"?: Editor;
    }
    interface DivMenuFontItalic {
        "editor"?: Editor;
    }
    interface DivMenuFontSize {
        "editor"?: Editor;
    }
    interface DivMenuFontUnderline {
        "editor"?: Editor;
    }
    interface DivMenuFormatBrush {
        "editor"?: Editor;
    }
    interface DivMenuImage {
        "editor"?: Editor;
    }
    interface DivMenuInsert {
        "editor"?: Editor;
    }
    interface DivMenuLetterSpace {
        "editor"?: Editor;
    }
    interface DivMenuLineHeight {
        "editor"?: Editor;
    }
    interface DivMenuList {
        "editor"?: Editor;
    }
    interface DivMenuNumberList {
        "editor"?: Editor;
    }
    interface DivMenuQuote {
        "editor"?: Editor;
    }
    interface DivMenuTable {
        "editor"?: Editor;
    }
    interface DivMenuTodo {
        "editor"?: Editor;
    }
    interface DivTiptap {
        "extensions"?: any[];
        "height"?: string;
        "onEditorInit"?: (event: DivTiptapCustomEvent<Editor>) => void;
    }
    interface DivUtilDivider {
    }
    interface MyComponent {
        /**
          * The first name
         */
        "first"?: string;
        /**
          * The last name
         */
        "last"?: string;
        /**
          * The middle name
         */
        "middle"?: string;
    }
    interface IntrinsicElements {
        "div-editor": DivEditor;
        "div-menu": DivMenu;
        "div-menu-alignment": DivMenuAlignment;
        "div-menu-bar": DivMenuBar;
        "div-menu-clear-format": DivMenuClearFormat;
        "div-menu-code": DivMenuCode;
        "div-menu-font-background": DivMenuFontBackground;
        "div-menu-font-bold": DivMenuFontBold;
        "div-menu-font-color": DivMenuFontColor;
        "div-menu-font-delline": DivMenuFontDelline;
        "div-menu-font-family": DivMenuFontFamily;
        "div-menu-font-italic": DivMenuFontItalic;
        "div-menu-font-size": DivMenuFontSize;
        "div-menu-font-underline": DivMenuFontUnderline;
        "div-menu-format-brush": DivMenuFormatBrush;
        "div-menu-image": DivMenuImage;
        "div-menu-insert": DivMenuInsert;
        "div-menu-letter-space": DivMenuLetterSpace;
        "div-menu-line-height": DivMenuLineHeight;
        "div-menu-list": DivMenuList;
        "div-menu-number-list": DivMenuNumberList;
        "div-menu-quote": DivMenuQuote;
        "div-menu-table": DivMenuTable;
        "div-menu-todo": DivMenuTodo;
        "div-tiptap": DivTiptap;
        "div-util-divider": DivUtilDivider;
        "my-component": MyComponent;
    }
}
export { LocalJSX as JSX };
declare module "@stencil/core" {
    export namespace JSX {
        interface IntrinsicElements {
            "div-editor": LocalJSX.DivEditor & JSXBase.HTMLAttributes<HTMLDivEditorElement>;
            "div-menu": LocalJSX.DivMenu & JSXBase.HTMLAttributes<HTMLDivMenuElement>;
            "div-menu-alignment": LocalJSX.DivMenuAlignment & JSXBase.HTMLAttributes<HTMLDivMenuAlignmentElement>;
            "div-menu-bar": LocalJSX.DivMenuBar & JSXBase.HTMLAttributes<HTMLDivMenuBarElement>;
            "div-menu-clear-format": LocalJSX.DivMenuClearFormat & JSXBase.HTMLAttributes<HTMLDivMenuClearFormatElement>;
            "div-menu-code": LocalJSX.DivMenuCode & JSXBase.HTMLAttributes<HTMLDivMenuCodeElement>;
            "div-menu-font-background": LocalJSX.DivMenuFontBackground & JSXBase.HTMLAttributes<HTMLDivMenuFontBackgroundElement>;
            "div-menu-font-bold": LocalJSX.DivMenuFontBold & JSXBase.HTMLAttributes<HTMLDivMenuFontBoldElement>;
            "div-menu-font-color": LocalJSX.DivMenuFontColor & JSXBase.HTMLAttributes<HTMLDivMenuFontColorElement>;
            "div-menu-font-delline": LocalJSX.DivMenuFontDelline & JSXBase.HTMLAttributes<HTMLDivMenuFontDellineElement>;
            "div-menu-font-family": LocalJSX.DivMenuFontFamily & JSXBase.HTMLAttributes<HTMLDivMenuFontFamilyElement>;
            "div-menu-font-italic": LocalJSX.DivMenuFontItalic & JSXBase.HTMLAttributes<HTMLDivMenuFontItalicElement>;
            "div-menu-font-size": LocalJSX.DivMenuFontSize & JSXBase.HTMLAttributes<HTMLDivMenuFontSizeElement>;
            "div-menu-font-underline": LocalJSX.DivMenuFontUnderline & JSXBase.HTMLAttributes<HTMLDivMenuFontUnderlineElement>;
            "div-menu-format-brush": LocalJSX.DivMenuFormatBrush & JSXBase.HTMLAttributes<HTMLDivMenuFormatBrushElement>;
            "div-menu-image": LocalJSX.DivMenuImage & JSXBase.HTMLAttributes<HTMLDivMenuImageElement>;
            "div-menu-insert": LocalJSX.DivMenuInsert & JSXBase.HTMLAttributes<HTMLDivMenuInsertElement>;
            "div-menu-letter-space": LocalJSX.DivMenuLetterSpace & JSXBase.HTMLAttributes<HTMLDivMenuLetterSpaceElement>;
            "div-menu-line-height": LocalJSX.DivMenuLineHeight & JSXBase.HTMLAttributes<HTMLDivMenuLineHeightElement>;
            "div-menu-list": LocalJSX.DivMenuList & JSXBase.HTMLAttributes<HTMLDivMenuListElement>;
            "div-menu-number-list": LocalJSX.DivMenuNumberList & JSXBase.HTMLAttributes<HTMLDivMenuNumberListElement>;
            "div-menu-quote": LocalJSX.DivMenuQuote & JSXBase.HTMLAttributes<HTMLDivMenuQuoteElement>;
            "div-menu-table": LocalJSX.DivMenuTable & JSXBase.HTMLAttributes<HTMLDivMenuTableElement>;
            "div-menu-todo": LocalJSX.DivMenuTodo & JSXBase.HTMLAttributes<HTMLDivMenuTodoElement>;
            "div-tiptap": LocalJSX.DivTiptap & JSXBase.HTMLAttributes<HTMLDivTiptapElement>;
            "div-util-divider": LocalJSX.DivUtilDivider & JSXBase.HTMLAttributes<HTMLDivUtilDividerElement>;
            "my-component": LocalJSX.MyComponent & JSXBase.HTMLAttributes<HTMLMyComponentElement>;
        }
    }
}
